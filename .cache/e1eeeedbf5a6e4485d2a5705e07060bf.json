{"dependencies":[{"name":"/home/melvin/PhpstormProjects/gjx/package.json","includedInParent":true,"mtime":1528375847532},{"name":"/home/melvin/PhpstormProjects/gjx/.babelrc","includedInParent":true,"mtime":1528358458908},{"name":"/home/melvin/PhpstormProjects/gjx/node_modules/pixi.js/package.json","includedInParent":true,"mtime":1528375667214},{"name":"./Mesh","loc":{"line":5,"column":21}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _Mesh2 = require('./Mesh');\n\nvar _Mesh3 = _interopRequireDefault(_Mesh2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * The Plane allows you to draw a texture across several points and them manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let Plane = new PIXI.Plane(PIXI.Texture.fromImage(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.mesh.Mesh\n * @memberof PIXI.mesh\n *\n */\nvar Plane = function (_Mesh) {\n    _inherits(Plane, _Mesh);\n\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the Plane.\n     * @param {number} verticesX - The number of vertices in the x-axis\n     * @param {number} verticesY - The number of vertices in the y-axis\n     */\n    function Plane(texture, verticesX, verticesY) {\n        _classCallCheck(this, Plane);\n\n        /**\n         * Tracker for if the Plane is ready to be drawn. Needed because Mesh ctor can\n         * call _onTextureUpdated which could call refresh too early.\n         *\n         * @member {boolean}\n         * @private\n         */\n        var _this = _possibleConstructorReturn(this, _Mesh.call(this, texture));\n\n        _this._ready = true;\n\n        _this.verticesX = verticesX || 10;\n        _this.verticesY = verticesY || 10;\n\n        _this.drawMode = _Mesh3.default.DRAW_MODES.TRIANGLES;\n        _this.refresh();\n        return _this;\n    }\n\n    /**\n     * Refreshes plane coordinates\n     *\n     */\n\n\n    Plane.prototype._refresh = function _refresh() {\n        var texture = this._texture;\n        var total = this.verticesX * this.verticesY;\n        var verts = [];\n        var colors = [];\n        var uvs = [];\n        var indices = [];\n\n        var segmentsX = this.verticesX - 1;\n        var segmentsY = this.verticesY - 1;\n\n        var sizeX = texture.width / segmentsX;\n        var sizeY = texture.height / segmentsY;\n\n        for (var i = 0; i < total; i++) {\n            var x = i % this.verticesX;\n            var y = i / this.verticesX | 0;\n\n            verts.push(x * sizeX, y * sizeY);\n\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        //  cons\n\n        var totalSub = segmentsX * segmentsY;\n\n        for (var _i = 0; _i < totalSub; _i++) {\n            var xpos = _i % segmentsX;\n            var ypos = _i / segmentsX | 0;\n\n            var value = ypos * this.verticesX + xpos;\n            var value2 = ypos * this.verticesX + xpos + 1;\n            var value3 = (ypos + 1) * this.verticesX + xpos;\n            var value4 = (ypos + 1) * this.verticesX + xpos + 1;\n\n            indices.push(value, value2, value3);\n            indices.push(value2, value4, value3);\n        }\n\n        // console.log(indices)\n        this.vertices = new Float32Array(verts);\n        this.uvs = new Float32Array(uvs);\n        this.colors = new Float32Array(colors);\n        this.indices = new Uint16Array(indices);\n\n        this.dirty++;\n        this.indexDirty++;\n\n        this.multiplyUvs();\n    };\n\n    /**\n     * Clear texture UVs when new texture is set\n     *\n     * @private\n     */\n\n\n    Plane.prototype._onTextureUpdate = function _onTextureUpdate() {\n        _Mesh3.default.prototype._onTextureUpdate.call(this);\n\n        // wait for the Plane ctor to finish before calling refresh\n        if (this._ready) {\n            this.refresh();\n        }\n    };\n\n    return Plane;\n}(_Mesh3.default);\n\nexports.default = Plane;\n//# sourceMappingURL=Plane.js.map","map":{"mappings":[{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/pixi.js/lib/mesh/Plane.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}}],"sources":{"node_modules/pixi.js/lib/mesh/Plane.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _Mesh2 = require('./Mesh');\n\nvar _Mesh3 = _interopRequireDefault(_Mesh2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * The Plane allows you to draw a texture across several points and them manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let Plane = new PIXI.Plane(PIXI.Texture.fromImage(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.mesh.Mesh\n * @memberof PIXI.mesh\n *\n */\nvar Plane = function (_Mesh) {\n    _inherits(Plane, _Mesh);\n\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the Plane.\n     * @param {number} verticesX - The number of vertices in the x-axis\n     * @param {number} verticesY - The number of vertices in the y-axis\n     */\n    function Plane(texture, verticesX, verticesY) {\n        _classCallCheck(this, Plane);\n\n        /**\n         * Tracker for if the Plane is ready to be drawn. Needed because Mesh ctor can\n         * call _onTextureUpdated which could call refresh too early.\n         *\n         * @member {boolean}\n         * @private\n         */\n        var _this = _possibleConstructorReturn(this, _Mesh.call(this, texture));\n\n        _this._ready = true;\n\n        _this.verticesX = verticesX || 10;\n        _this.verticesY = verticesY || 10;\n\n        _this.drawMode = _Mesh3.default.DRAW_MODES.TRIANGLES;\n        _this.refresh();\n        return _this;\n    }\n\n    /**\n     * Refreshes plane coordinates\n     *\n     */\n\n\n    Plane.prototype._refresh = function _refresh() {\n        var texture = this._texture;\n        var total = this.verticesX * this.verticesY;\n        var verts = [];\n        var colors = [];\n        var uvs = [];\n        var indices = [];\n\n        var segmentsX = this.verticesX - 1;\n        var segmentsY = this.verticesY - 1;\n\n        var sizeX = texture.width / segmentsX;\n        var sizeY = texture.height / segmentsY;\n\n        for (var i = 0; i < total; i++) {\n            var x = i % this.verticesX;\n            var y = i / this.verticesX | 0;\n\n            verts.push(x * sizeX, y * sizeY);\n\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        //  cons\n\n        var totalSub = segmentsX * segmentsY;\n\n        for (var _i = 0; _i < totalSub; _i++) {\n            var xpos = _i % segmentsX;\n            var ypos = _i / segmentsX | 0;\n\n            var value = ypos * this.verticesX + xpos;\n            var value2 = ypos * this.verticesX + xpos + 1;\n            var value3 = (ypos + 1) * this.verticesX + xpos;\n            var value4 = (ypos + 1) * this.verticesX + xpos + 1;\n\n            indices.push(value, value2, value3);\n            indices.push(value2, value4, value3);\n        }\n\n        // console.log(indices)\n        this.vertices = new Float32Array(verts);\n        this.uvs = new Float32Array(uvs);\n        this.colors = new Float32Array(colors);\n        this.indices = new Uint16Array(indices);\n\n        this.dirty++;\n        this.indexDirty++;\n\n        this.multiplyUvs();\n    };\n\n    /**\n     * Clear texture UVs when new texture is set\n     *\n     * @private\n     */\n\n\n    Plane.prototype._onTextureUpdate = function _onTextureUpdate() {\n        _Mesh3.default.prototype._onTextureUpdate.call(this);\n\n        // wait for the Plane ctor to finish before calling refresh\n        if (this._ready) {\n            this.refresh();\n        }\n    };\n\n    return Plane;\n}(_Mesh3.default);\n\nexports.default = Plane;\n//# sourceMappingURL=Plane.js.map"},"lineCount":140}},"hash":"998c171416cac8d8bc92243f557cb8c7","cacheData":{"env":{}}}